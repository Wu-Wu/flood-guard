#
# Copyright (c) 2016-2021 Anton Gerasimov <me@zyxmasta.com>
# License: http://opensource.org/licenses/MIT
#

# режим технического обслуживания приводов кранов
# воскресенье, 01:05
const MNT_HOUR          = 1;            # ЧЧ:мм [ 0, 1, 2, .., 23 ]
const MNT_MINUTE        = 5;            # чч:ММ [ 0, 1, 2, .., 59 ]
const MNT_DOW           = 7;            # ПН(1), ВТ(2), СР(3), ЧТ(4), ПТ(5), СБ(6), ВС(7)

# идентификаторы индикаторов
const MNT_LED_ID        = 6;            # "выход 4" (синий)   - техобслуживание кранов
const ALM_LED_ID        = 7;            # "выход 5" (красный) - тревога/потоп

const VALVE_ID          = 1;            # приводы кранов "реле 1"

const MAX_SENSORS       = 8;            # максимальное количество групп датчиков

# программы мигания индикаторами
const FLASH_WORKING     = $SCENARIO10;  # обслуживание работает     (морзе "W": *--)
const FLASH_SKIPPING    = $SCENARIO11;  # пропуск обслуживания      (морзе "S": ***)
const FLASH_WRONG       = $SCENARIO12;  # не тот день недели        (морзе "D": -**)
const FLASH_EXITING     = $SCENARIO13;  # выход из обслуживания     (морзе "X": -**-)
const FLASH_GRACE       = $SCENARIO14;  # отсрочка открытия кранов  (морзе "G": --*)

const PERIOD_15         = 150;          # период 15 сек
const PERIOD_30         = 300;          # период 30 сек
const PERIOD_45         = 450;          # период 45 сек

const PERIOD_GRACE      = PERIOD_30;    # отсрочка открытия кранов

# период тишины
const MUTE_FROM         = 22;           # > 22:00
const MUTE_TILL         = 9;            # < 09:00

var mnt_in_progress     = 0;            # флаг, что идёт режим техосблуживания

proc main () {
    # событие
    var ev = $get_event_id();

    if ev == $EVT_INIT {
        # обработка инициализации
        $set_event_mask( $EM_INPUT | $EM_SYSTEM );

        # гасим индикаторы
        control_mnt_led( $OFF );
        control_alm_led( $OFF );

        # установка будильника техобслуживания
        $set_alarm( 1, MNT_HOUR, MNT_MINUTE );
    }
    else if ev == $EVT_ALARM1 {
        # обработка события будильника
        valve_maintenance();
    }
    else if ev == $EVT_TIMER1 {
        # отключаем таймер
        $reset_timer( 1 );

        # выключаем лампу техобслуживания
        control_mnt_led( $OFF );
    }
    else if ev == $EVT_TIMER2 {
        # отключаем таймер
        $reset_timer( 2 );

        # открытие привода крана
        toggle_valve_state();

        # запуск таймера для привода крана
        $set_timer( 3, PERIOD_45 );
    }
    else if ev == $EVT_TIMER3 {
        # отключаем таймер
        $reset_timer( 3 );

        # выключаем лампу техобслуживания
        control_mnt_led( $OFF );

        # сообщаем, что техобслуживание завершено
        mnt_in_progress = 0;
    }
    else if ev == $EVT_TIMER4 {
        # отключаем таймер
        $reset_timer( 4 );

        # отключаем лампу тревоги
        control_alm_led( $OFF );

        # действуем в режиме охрана и кран закрыт?
        if is_valve_closed() {
            # открываем кран
            toggle_valve_state();
        }
    }
    else if ev == $EVT_INPUT1_ACTIVE {
        # вход 1 активен (датчик промок)
        sensor_wet(1);
    }
    else if ev == $EVT_INPUT1_PASSIVE {
        # вход 1 пассивен (датчик высох)
        sensor_dry(1);
    }
    else if ev == $EVT_INPUT2_ACTIVE {
        # вход 2 активен (датчик промок)
        sensor_wet(2);
    }
    else if ev == $EVT_INPUT2_PASSIVE {
        # вход 2 пассивен (датчик высох)
        sensor_dry(2);
    }
    else if ev == $EVT_INPUT3_ACTIVE {
        # вход 3 активен (датчик промок)
        sensor_wet(3);
    }
    else if ev == $EVT_INPUT3_PASSIVE {
        # вход 3 пассивен (датчик высох)
        sensor_dry(3);
    }
    else if ev == $EVT_INPUT4_ACTIVE {
        # вход 4 активен (датчик промок)
        sensor_wet(4);
    }
    else if ev == $EVT_INPUT4_PASSIVE {
        # вход 4 пассивен (датчик высох)
        sensor_dry(4);
    }
    else if ev == $EVT_INPUT5_ACTIVE {
        # вход 5 активен (датчик промок)
        sensor_wet(5);
    }
    else if ev == $EVT_INPUT5_PASSIVE {
        # вход 5 пассивен (датчик высох)
        sensor_dry(5);
    }
    else if ev == $EVT_INPUT6_ACTIVE {
        # вход 6 активен (датчик промок)
        sensor_wet(6);
    }
    else if ev == $EVT_INPUT6_PASSIVE {
        # вход 6 пассивен (датчик высох)
        sensor_dry(6);
    }
    else if ev == $EVT_INPUT7_ACTIVE {
        # вход 7 активен (датчик промок)
        sensor_wet(7);
    }
    else if ev == $EVT_INPUT7_PASSIVE {
        # вход 7 пассивен (датчик высох)
        sensor_dry(7);
    }
    else if ev == $EVT_INPUT8_ACTIVE {
        # вход 8 активен (датчик промок)
        sensor_wet(8);
    }
    else if ev == $EVT_INPUT8_PASSIVE {
        # вход 8 пассивен (датчик высох)
        sensor_dry(8);
    }
    else if ev == $EVT_POWER_FAULT {
        # падение сетевого питания
        mute_notify();
    }
    else if ev == $EVT_POWER_RECOVERY {
        # восстановление сетевого питания
        mute_notify();
    }
    else if ev == $EVT_BATTERY_LOW1 {
        # акб разряжена до уровня 1
        mute_notify();
    }
    else if ev == $EVT_BATTERY_LOW2 {
        # акб разряжена до уровня 2
        # TODO: отключать реле для закрытия приводов кранов
        mute_notify();
    }
    else if ev == $EVT_BALANCE_LOW {
        # баланс снизился до минимального значения
        mute_notify();
    }
    else if ev == $EVT_DEVICE_ON {
        # контроллер включен
        mute_notify();
    }
    else if ev == $EVT_DEVICE_RESTART {
        # контроллер перезапущен
        mute_notify();
    }
    else if ev == $EVT_FIRMWARE_UPGRADE {
        # прошивка контроллера обновлена
        mute_notify();
    }
    else if ev == $EVT_RELAY_CONN_FAILED {
        # контроллер не смог подключиться к серверу-ретрянслятору
        mute_notify();
    }
    else if ev == $EVT_GPRS_CONN_FAILED {
        # контроллер не смог установить соединение GPRS
        mute_notify();
    }
    # XXX: системные события ниже не формируются и исключены из обработки
    #   $EVT_TEMP_LOW
    #   $EVT_TEMP_NORMAL
    #   $EVT_TEMP_HIGH
    #   $EVT_CASE_OPEN
}

# технического обслуживание приводов кранов (открытие/закрытие)
proc valve_maintenance () {
    # текущее время
    var ts = $get_time();

    if ts < 0 {
        # ничего не делаем, если не удалось получить время
        return;
    }

    # проверяем время и день недели
    if $get_day_of_week( ts ) == MNT_DOW {
        # проверка состояния датчиков протечки и режима
        if is_any_sensor_active() {
            # течёт - пропускаем
            # мигаем лампой MNT режим пропуска
            control_mnt_led( FLASH_SKIPPING );

            # устанавливаем таймер
            $set_timer( 1, PERIOD_30 );
        }
        else {
            # сухо - обслуживание

            # сообщаем, что идёт техобслуживание
            mnt_in_progress = 1;

            # мигаем лампой MNT режим обслуживания
            control_mnt_led( FLASH_WORKING );

            # закрытие привода крана
            toggle_valve_state();

            # запуск таймера для привода крана
            $set_timer( 2, PERIOD_45 );
        }
    }
    else {
        # мигаем лампой MNT режим неверный день недели
        control_mnt_led( FLASH_WRONG );

        # устанавливаем таймер
        $set_timer( 1, PERIOD_15 );
    }
}

# имеется ли любой промокший датчик?
fun is_any_sensor_active () {
    var sensor_id = 1;

    while sensor_id <= MAX_SENSORS {
        # этот вход активен?
        if is_blocked_by(sensor_id) {
            return 1;
        }
        # переходим к следующему
        sensor_id = sensor_id + 1;
    }

    # ничего активного не нашлось
    return 0;
}

# реинициализация режима охраны
proc rearm () {
    # перевод в режим наблюдения
    $set_arm_mode( $DISARM );
    # перевод в режим охраны
    $set_arm_mode( $ARM );
}

# проверка закрытия крана
fun is_valve_closed () {
    return $get_output_state( VALVE_ID );
}

# проверка срабатывания входа
fun is_blocked_by (sensor_id) {
    return $get_input_state( sensor_id );
}

# управление индикатором техобслуживания
proc control_mnt_led (mode) {
    $set_output_state( MNT_LED_ID, mode );
}

# управление индикатором тревоги
proc control_alm_led (mode) {
    $set_output_state( ALM_LED_ID, mode );
}

# управление приводом крана
proc toggle_valve_state () {
    var state = $get_output_state( VALVE_ID );
    $set_output_state( VALVE_ID, !state );
}

# датчик протечки промок
proc sensor_wet (sensor_id) {
    # выдаём сигнал на лампу тревоги
    control_alm_led( calc_scenario(sensor_id) );

    # сброс режима отсрочки
    reset_grace();

    # сброс режима обслуживания
    reset_maintenance();

    # кран не закрыт?
    if !is_valve_closed() {
        # закрываем кран
        toggle_valve_state();
    }
}

# датчик протечки высох
proc sensor_dry (sensor_id) {
    var sensor = 0;
    var is_wet = 0;

    # проверяем остальные группы датчиков (входы)
    while sensor < MAX_SENSORS {
        # увеличиваем номер входа
        sensor = sensor + 1;

        # текущий вход - это переданный?
        if sensor == sensor_id {
            # переходим к следующему, поскольку о нём нам уже известно
            continue;
        }

        if is_blocked_by( sensor ) {
            # этот вход активен (мокрый)
            is_wet = sensor;

            # датчик из этой группы промокший
            # выдаём сигнал на лампу тревоги
            control_alm_led( calc_scenario(sensor) );

            # прекращаем проверку остальных входов
            break;
        }
    }

    # обнаружен другой активный вход (мокро)?
    if is_wet {
        # выходим
        return;
    }

    # везде сухо

    # включаем режим отсрочки
    control_alm_led( FLASH_GRACE );

    # реинициализация режима охраны
    rearm();

    # устанавливаем таймер на окрытие кранов
    $set_timer( 4, PERIOD_GRACE );
}

# вычисление номера сценария для выполнения
fun calc_scenario (sensor_id) {
    # если передано число большее, чем максимальное количество
    if sensor_id > MAX_SENSORS {
        # эквивалент $OFF
        return 0;
    }
    # иначе возвращаем эквивалент $SCENARIOX ($SCENARIO1, $SCENARIO2, ..)
    return 0xFF & ( sensor_id + 1 );
}

# отмена обслуживания
proc reset_maintenance () {
    if !mnt_in_progress {
        return;
    }

    # сброс таймеров
    $reset_timer( 2 );
    $reset_timer( 3 );

    # мигаем лампой MNT режим пропуска
    control_mnt_led( FLASH_EXITING );

    # устанавливаем таймер для выключения лампы
    $set_timer( 1, PERIOD_30 );

    # сбрасываем флаг
    mnt_in_progress = 0;
}

# отмена острочки
proc reset_grace () {
    # отключаем таймер отсрочки
    $reset_timer( 4 );
}

# отмена уведомлений в период тишины
proc mute_notify () {
    # текущее время
    var ts = $get_time();

    if ts < 0 {
        # ничего не делаем, если не удалось получить время
        return;
    }

    # текущий час
    var hour = $get_hour( ts );

    if hour >= MUTE_FROM || hour < MUTE_TILL {
        # отменяем уведомление
        $cancel_event();
    }
}
